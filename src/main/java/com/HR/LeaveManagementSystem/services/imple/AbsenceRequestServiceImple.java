package com.HR.LeaveManagementSystem.services.imple;

import com.HR.LeaveManagementSystem.entities.AbsenceRequest;
import com.HR.LeaveManagementSystem.exceptions.ResourceNotFoundException;
import com.HR.LeaveManagementSystem.payloads.AbsenceRequestDto;
import com.HR.LeaveManagementSystem.repositories.AbsenceRequestRepo;
import com.HR.LeaveManagementSystem.services.AbsenceRequestService;
import com.HR.LeaveManagementSystem.services.EmailSenderService;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
//@Cacheable("absenceRequest")
public class AbsenceRequestServiceImple implements AbsenceRequestService {

    @Autowired
    private ModelMapper modelMapper;

    @Autowired
    private AbsenceRequestRepo absenceRequestRepo;

    @Autowired
    private EmailSenderService emailSenderService;

    @Override
    public AbsenceRequestDto createAbsenceRequest(AbsenceRequestDto absenceRequestDto) {
        AbsenceRequest absenceRequest = this.dtoToRequest(absenceRequestDto);
        AbsenceRequest savedRequest = this.absenceRequestRepo.save(absenceRequest);

        String emailHtml = generateEmailHTML(savedRequest);
        this.emailSenderService.sendEmailWithHtml("baljeetpte1699@gmail.com","Approval required for absence",emailHtml);

        return this.requestToDTO(savedRequest);
    }

    private String generateEmailHTML(AbsenceRequest savedRequest) {

        String url = "http://localhost:5175/";

        String emailHtml = "" +
                "<div>Hey "+savedRequest.getManager()+" </div>" +
                "<div><h3>An absence request is generated by your employee with id "+savedRequest.getId()+"</h3> </div>" +
                "<div><h3>It requires your approval, please click on link below to approve it</h3></div>" +
                "Url : "+url;

        return emailHtml;
    }

//    @CachePut("absenceRequest")
    @Override
    public AbsenceRequestDto updateAbsenceRequest(AbsenceRequestDto absenceRequestDto, Integer absenceRequestId) {

        AbsenceRequest absenceRequest = this.absenceRequestRepo.findById(absenceRequestId).orElseThrow(()-> new ResourceNotFoundException("abbsenceRequest","AbsenceRequest",absenceRequestId));
        absenceRequest.setAbsence_type_id(absenceRequestDto.getAbsence_type_id());
        absenceRequest.setStartDate(absenceRequestDto.getStartDate());
        absenceRequest.setEndDate(absenceRequestDto.getEndDate());
        absenceRequest.setIs_approved(absenceRequestDto.getIs_approved());

        AbsenceRequest updatedAbsence = this.absenceRequestRepo.save(absenceRequest);

        return this.requestToDTO(updatedAbsence);
    }

//    @CacheEvict("absenceRequest")
    @Override
    public void deleteAbsenceRequest(Integer absenceRequestId) {
        AbsenceRequest absenceRequest = this.absenceRequestRepo.findById(absenceRequestId).orElseThrow(()-> new ResourceNotFoundException("abbsenceRequest","AbsenceRequest",absenceRequestId));
        this.absenceRequestRepo.delete(absenceRequest);
    }

    @Override
    public AbsenceRequestDto getAbsenceRequestById(Integer absenceRequestId) {
        AbsenceRequest absenceRequest = this.absenceRequestRepo.findById(absenceRequestId).orElseThrow(()-> new ResourceNotFoundException("abbsenceRequest","AbsenceRequest",absenceRequestId));
        return this.requestToDTO(absenceRequest);
    }

    @Override
    public List<AbsenceRequestDto> getAllRequest() {
        List<AbsenceRequest> absenceRequests = this.absenceRequestRepo.findAll();
        List<AbsenceRequestDto> absenceRequestDtos =  absenceRequests.stream().map(absenceRequest -> this.requestToDTO(absenceRequest)).collect(Collectors.toList());
        return absenceRequestDtos;
    }

    @Override
    public List<AbsenceRequestDto> getAllRequestRequiredApproval(String manager) {
        List<AbsenceRequest> absenceRequests = this.absenceRequestRepo.findByStatus(manager);
        List<AbsenceRequestDto> absenceRequestDtos =  absenceRequests.stream().map(absenceRequest -> this.requestToDTO(absenceRequest)).collect(Collectors.toList());
        return absenceRequestDtos;
    }

    @Override
    public List<AbsenceRequestDto> getAbsenceRequestByEmpId(Integer employeeId) {
        List<AbsenceRequest> absenceRequests = this.absenceRequestRepo.findByEmployeeId(employeeId);
        List<AbsenceRequestDto> absenceRequestDtos =  absenceRequests.stream().map(absenceRequest -> this.requestToDTO(absenceRequest)).collect(Collectors.toList());
        return absenceRequestDtos;
    }

    private AbsenceRequestDto requestToDTO(AbsenceRequest absenceRequest){
       return this.modelMapper.map(absenceRequest,AbsenceRequestDto.class);
    }

    private AbsenceRequest dtoToRequest(AbsenceRequestDto absenceRequestDto){
        return this.modelMapper.map(absenceRequestDto,AbsenceRequest.class);
    }
}
